
pool:
  vmImage: 'ubuntu-20.04'

stages:
- stage: Build
  jobs:
  - job: BuildAndPublishArtifacts
    displayName: Build and publish artifacts
    steps:

    - task: geeklearningio.gl-vsts-tasks-yarn.yarn-installer-task.YarnInstaller@3
      displayName: Install Yarn 1.22.4
      inputs:
        versionSpec: 1.22.4

    - task: geeklearningio.gl-vsts-tasks-yarn.yarn-task.Yarn@3
      displayName: yarn install
      inputs:
        arguments: install

    - task: geeklearningio.gl-vsts-tasks-yarn.yarn-task.Yarn@3
      displayName: yarn lint
      inputs:
        arguments: lint

    - bash: |
        sudo apt-get update
        sudo apt-get install -y libgbm1
      displayName: Install libgbm1 (required by Puppeteer 3)

    - task: geeklearningio.gl-vsts-tasks-yarn.yarn-task.Yarn@3
      displayName: yarn test-ci
      inputs:
        arguments: test-ci

    - task: geeklearningio.gl-vsts-tasks-yarn.yarn-task.Yarn@3
      displayName: yarn build-prod
      inputs:
        arguments: build-prod

    - task: geeklearningio.gl-vsts-tasks-file-patch.json-patch-task.JsonPatch@3
      displayName: Version web Artifact
      inputs:
        JsonWorkingDir: 'dist/'
        JsonTargetFilters: environment.json
        JsonPatchContent: |
          = /build => "$(BUILD_BUILDNUMBER)"
          = /commit => "$(BUILD_SOURCEVERSION)"
        OutputPatchFile: true
        FailIfNoPatchApplied: true

    - publish: 'dist/'
      displayName: Publish Artifact - web
      artifact: web

    - publish: 'template/template.json'
      displayName: Publish Artifact - ARM
      artifact: arm

    - task: PublishTestResults@2
      displayName: Publish tests results
      inputs:
        testResultsFiles: 'tests-results/tests-results.xml'
      condition: succeededOrFailed()

    - task: PublishCodeCoverageResults@1
      displayName: Publish coverage
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage/cobertura-coverage.xml'
        failIfCoverageEmpty: true
      condition: succeededOrFailed()

- stage: Release
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  variables:
  - name: ResourceGroupLocation
    value: 'Southeast Asia'
  - name: ResourceGroupName
    value: peclrviewer
  - name: StorageAccountName
    value: peclrviewer
  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: prod
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureResourceGroupDeployment@3
            displayName: 'Deploy ARM template'
            inputs:
              ConnectedServiceName: 'Azure Resource Manager automatic Service Principal'
              action: 'Create Or Update Resource Group'
              resourceGroupName: '$(ResourceGroupName)'
              location: '$(ResourceGroupLocation)'
              templateLocation: 'Linked artifact'
              csmFile: '$(Pipeline.Workspace)/arm/template.json'
              overrideParameters: -name $(StorageAccountName)
              deploymentMode: 'Incremental'
          - task: AzureCLI@2
            displayName: 'Create public $root container if not exist'
            inputs:
              azureSubscription: 'Azure Resource Manager automatic Service Principal'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: 'az storage container create -n ''$root'' --public-access "blob" --account-name "$1"'
              arguments: '$(StorageAccountName)'
          - task: AzureCLI@2
            displayName: Deploy
            inputs:
              azureSubscription: 'Azure Resource Manager automatic Service Principal'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: 'az storage blob upload-batch -d ''$root'' -s "$1/web/" --account-name "$2"'
              arguments: '$(Pipeline.Workspace) $(StorageAccountName)'
